# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TlhGGvrLRYg_HO9M3OWKH1KkjAMwBbYP
"""

import librosa
import os
import shutil
from concurrent.futures import ThreadPoolExecutor
import soundfile as sf
import numpy as np

SAMPLE_RATE = 16000

input_path= "server/podcast_audio_only_one/"

output_path="output_path/"

import os
import soundfile as sf

class AudioConverter:
    def __init__(self, input_path, output_path,new_sample_rate):
        self.input_path = input_path
        self.output_path = output_path
        self.new_sample_rate=new_sample_rate

    def main_audio(self):
        with ThreadPoolExecutor() as executor:
            for dirpath, dirnames, filenames in os.walk(self.input_path):

                for filename in filenames:
                    if filename.endswith('.ogg'):
                        input_file = os.path.join(dirpath, filename)
                        y, sr = librosa.load(input_file, sr=self.new_sample_rate, mono=True, dtype='float32')
                        y_16bit = (y * (2 ** 15)).astype(np.int16)
                        y_16bit_path = input_file + '.16bit.wav'
                        sf.write(y_16bit_path, y_16bit, sr, subtype='PCM_16')

                        #output_file = self.build_output_path(input_file)
                        #executor.submit(self.resample_audio, input_path, output_file)

    def build_output_path(self, input_file):
        rel_path = os.path.relpath(input_file, self.input_path)
        output_file = os.path.join(self.output_path, rel_path)
        output_file = os.path.splitext(output_file)[0] + ".wav"
        return output_file



    def resample_audio(self, input_file, output_file):
        audio, sample_rate = sf.read(input_file)

        resampled_audio = sf.resample(audio, self.new_sample_rate)

        sf.write(output_file, resampled_audio, self.new_sample_rate, subtype='PCM_16')


    def convert_audio(self, input_file, output_file):
        audio, sample_rate = sf.read(input_file)

        sf.write(output_file, audio, self.new_sample_rate ,subtype='PCM_16')



converter = AudioConverter(input_path=input_path, output_path=output_path, new_sample_rate=16000)
converter.main_audio()